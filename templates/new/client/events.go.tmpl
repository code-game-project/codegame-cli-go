package {{.PackageName}}

/*
This code was generated by codegame-cli-go.

CHANGES TO THIS FILE MAY CAUSE INCORRECT BEHAVIOR AND WILL BE LOST IF
THE CODE IS REGENERATED.
*/

import "{{.LibraryURL}}"

{{range .Commands}}
// Send{{.PascalName}} sends a `{{.Name}}` command.
func (g *Game) Send{{.PascalName}}(data {{.PascalName}}CmdData) error {
	return g.socket.Send({{.PascalName}}Cmd, data)
}
{{end}}

{{range .Events}}
// On{{.PascalName}} triggers the callback every time the `{{.Name}}` event is received.
func (g *Game) On{{.PascalName}}(callback func(data {{.PascalName}}EventData)) cg.CallbackId {
	return g.socket.On({{.PascalName}}Event, func(event cg.Event) {
		var data {{.PascalName}}EventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}

// On{{.PascalName}}Once triggers the callback the next time the `{{.Name}}` event is received.
func (g *Game) On{{.PascalName}}Once(callback func(data {{.PascalName}}EventData)) cg.CallbackId {
	return g.socket.Once({{.PascalName}}Event, func(event cg.Event) {
		var data {{.PascalName}}EventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}
{{end}}

// OnCGNewPlayer triggers the callback every time the `cg_new_player` event is received.
func (g *Game) OnCGNewPlayer(callback func(data cg.NewPlayerEventData)) cg.CallbackId {
	return g.socket.On(cg.NewPlayerEvent, func(event cg.Event) {
		var data cg.NewPlayerEventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}

// OnCGNewPlayerOnce triggers the callback the next time the `cg_new_player` event is received.
func (g *Game) OnCGNewPlayerOnce(callback func(data cg.NewPlayerEventData)) cg.CallbackId {
	return g.socket.Once(cg.NewPlayerEvent, func(event cg.Event) {
		var data cg.NewPlayerEventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}

// OnCGLeft triggers the callback every time the `cg_left` event is received.
func (g *Game) OnCGLeft(callback func(data cg.LeftEventData)) cg.CallbackId {
	return g.socket.On(cg.LeftEvent, func(event cg.Event) {
		var data cg.LeftEventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}

// OnCGLeftOnce triggers the callback the next time the `cg_left` event is received.
func (g *Game) OnCGLeftOnce(callback func(data cg.LeftEventData)) cg.CallbackId {
	return g.socket.Once(cg.LeftEvent, func(event cg.Event) {
		var data cg.LeftEventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}

// OnCGError triggers the callback every time the `cg_error` event is received.
func (g *Game) OnCGError(callback func(data cg.ErrorEventData)) cg.CallbackId {
	return g.socket.On(cg.ErrorEvent, func(event cg.Event) {
		var data cg.ErrorEventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}

// OnCGErrorOnce triggers the callback the next time the `cg_error` event is received.
func (g *Game) OnCGErrorOnce(callback func(data cg.ErrorEventData)) cg.CallbackId {
	return g.socket.Once(cg.ErrorEvent, func(event cg.Event) {
		var data cg.ErrorEventData
		err := event.UnmarshalData(&data)
		if err == nil {
			callback(data)
		}
	})
}

// RemoveCallback removes the event callback with the specified id.
func (g *Game) RemoveCallback(id cg.CallbackId) {
	g.socket.RemoveCallback(id)
}
